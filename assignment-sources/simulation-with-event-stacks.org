#+title: Simulation with event stacks
#+author: Nicky D. van Foreest
#+date: 2022:03:14

#+STARTUP: indent
#+STARTUP: showall
#+PROPERTY: header-args:shell :exports both
#+PROPERTY: header-args:emacs-lisp :eval no-export
#+PROPERTY: header-args:python :eval no-export
# +PROPERTY: header-args:python :session  :exports both   :dir "./figures/" :results output


#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [assignments]

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat "\\chapter{%t}\n"))
#+end_src



* TODO Set theme and font size for YouTube                         :noexport:

#+begin_src emacs-lisp :eval no-export
(modus-themes-load-operandi)
(set-face-attribute 'default nil :height 200)
#+end_src


* General info

The tools we developed up to now do not suffice to simulate more difficult (queueing) systems. For harder cases we need a concept called /event stack/. Here we show how to implement an event stack as a  /heap queue/.  Finally, we will use python /classes/ as these are very natural objects to use in complicated simulations. At the end you will see how general and clean our final simulation environment is.

* Sorting with heap queues

We start with a simple problem: how to sort a bunch of students by age?
For this we will use a /heap queue/. This is a stack on which we can push elements, then, when popping from the stack, the elements come out in a sorted way.


#+begin_exercise
To understand the code below, first look up on the web:
a. what is the difference between a /tuple/ and a /list/?
b. When to use one or the other?
As always, keep your answer brief, just show that you understand; that suffices.
#+end_exercise

The heap in our code below uses the first element of the  /tuple/ of a student's age and name to sort the students. Let's put a number of students on the stack.
We need a new  modules ~heapq~; this provides the algoritms for pushing to and popping from a stack.

#+begin_src python  :results table
from heapq import heappop, heappush

stack = []

heappush(stack, (25, "Cynthia"))
heappush(stack, (21, "James"))
heappush(stack, (21, "James"))
heappush(stack, (20, "Pete"))
heappush(stack, (18, "Clair"))
heappush(stack, (14, "Jim"))
print(stack)
#+end_src

Observe that with popping we take the element from the stack with the smallest age.
You should know that anytime we pop from the stack, the stack becomes one element shorter. (And with pushing it becomes longer.)

#+begin_src python  :results table
age, name = heappop(stack)
print(age, name)
#+end_src

#+begin_exercise
Add the following lines to the code above, and include the output. You should see that the students are printed in order of age.
#+begin_src python
while stack:
    e = heappop(stack)
    print(e)
#+end_src
#+end_exercise

* Classes

In a class we can organize information.

#+begin_src python
class Student:
    def __init__(self, name, age, phone):
        self.name = name
        self.age = age
        self.phone = phone

    def __repr__(self):
        return f"{self.name}, {self.age}, {self.phone}"

#+end_src

#+begin_exercise
Look up on the web: what does the =repr= method do?
#+end_exercise


Making an /object/ of a /class/ is called /instantiation/.

#+begin_src python :results table
hank = Student("Hank", "21", "Huawei")
print(hank)
#+end_src

#+RESULTS:
: Hank, 21, Huawei


Let's add some more students and put them in a list.
#+begin_src python :results table
students = [
    Student("Joseph", "18", "Motorola"),
    Student("Maria", "21", "Huawei"),
    Student("Natasha", "20", "Apple"),
    Student("Chris", "25", "Nexus"),
]
#+end_src

#+begin_exercise
Add   two more students, e.g., you and your group mate, to the list. (And if you don't like to spread such details, just lie about your age :-) )
Show your code.
#+end_exercise

With heaps we can sort the students in any sequence we like.
Let's sort them by phone brand.

#+begin_src python :results table
from heapq import heappop, heappush


class Student:
    def __init__(self, name, age, phone):
        self.name = name
        self.age = age
        self.phone = phone

    def __repr__(self):
        return f"{self.name}, {self.age}, {self.phone}"


students = [
    Student("Joseph", "18", "Motorola"),
    Student("Maria", "21", "Huawei"),
    Student("Natasha", "20", "Apple"),
    Student("Chris", "25", "Nexus"),
]

stack = []

for s in students:
    heappush(stack, (s.phone, s))

while stack:
    print(heappop(stack))
#+end_src


#+begin_exercise
What line makes that the students are sorted by phone brand?
#+end_exercise

#+begin_exercise
Change the code so that you can sort the students  by age. Show the line(s) of your code to achieve this.
#+end_exercise

#+begin_exercise
Extend  the =Job= class such that we can give the student also a surname. Then invent some surnames, and sort the students by surname. Include your code to show how you did this.
#+end_exercise


* A job class useful for simulation

How can use heap queues in the simulation of queueing systems?
To see this, think of time as a sequence of events in which things happen. In a queueing system, three things can happen: a job arrives, a job service starts,  or a job leaves. For a job we should  specify its arrival and  departure times. We store  the jobs in a heap queue and add the  arrival time as a key to pop jobs in order of arrival.

We store the arrival, service, and departure time as the /attributes/ of a job class. We also store the queue length at arrival times to gather statistics once the simulation is over.

#+begin_src python
from heapq import heappop, heappush

ARRIVAL, DEPARTURE = 0, 1


class Job:
    def __init__(self):
        self.arrival_time = 0
        self.service_time = 0
        self.departure_time = 0
        self.queue_length_at_arrival = 0

    def sojourn_time(self):
        return self.departure_time - self.arrival_time

    def waiting_time(self):
        return self.sojourn_time() - self.service_time

    def service_start(self):
        return self.departure_time - self.service_time

    def __repr__(self):
        return f"{self.arrival_time}, {self.service_time}, {self.service_start()}, \
                 {self.departure_time}\n"

    def __le__(self, other):
        # this is necessary to sort jobs when they have the same arrival times.
        return self.id <= other.id


events = []  # event stack, global
num_jobs = 5
interarrival_time = 3
service_time = 5

arrival_time = 0
for i in range(num_jobs):
    arrival_time += interarrival_time
    job = Job()
    job.arrival_time = arrival_time
    job.service_time = service_time
    heappush(events, (job.arrival_time, job, ARRIVAL))

while events:
    time, job, typ = heappop(events)
    print(job)
#+end_src

#+begin_exercise
Explain the waiting time and sojourn functions of the =Job= class.
#+end_exercise

For later purposes, we have to add labels to the events in the heap queue to indicate what type of event we are dealing with, an arrival or a departure.

#+begin_exercise
Change the ~interarrival_time~ to some number you like. Run the code, include your results, and explain the output of the print statement.
#+end_exercise


* A very powerful GG1 server simulator

The code here  below is a MWE (minimal working example). You should copy it  and run it. Below we'll ask questions in the exercises about how the code works.

** Start

Copy this first.

#+begin_src python
from heapq import heappop, heappush
import numpy as np
from scipy.stats import expon, uniform

import matplotlib.pylab as plt

np.random.seed(3)


ARRIVAL, DEPARTURE = 0, 1
IDLE, BUSY = 0, 1
#+end_src

Then put the ~Job~ class after this.

** GG1 simulator.

Copy ~GG1~ class and put this after the ~Job~ class. We put the code on one page so that the copying is easy.

\clearpage

#+begin_src python
class GG1:
    def __init__(self, F, G, num_jobs):
        self.F = F  # interarrival time distribution
        self.G = G  # service time distribution
        self.num_jobs = num_jobs
        self.queue = []
        self.served_jobs = []  # assemble statistics
        self.state = IDLE

    def make_jobs(self):
        time = 0
        for i in range(num_jobs):
            time += self.F.rvs()
            job = Job()
            job.arrival_time = time
            job.service_time = self.G.rvs()
            heappush(events, (job.arrival_time, job, ARRIVAL))

    def run(self):
        while events:  # not empty
            time, job, typ = heappop(events)

            if typ == ARRIVAL:
                self.handle_arrival(time, job)
            else:
                self.handle_departure(time, job)

    def handle_arrival(self, time, job):
        job.queue_length_at_arrival = len(self.queue)
        if self.state == IDLE:
            self.state = BUSY
            self.start_service(time, job)
        else:
            self.put_job_in_queue(job)

    def start_service(self, time, job):
        job.departure_time = time + job.service_time
        heappush(events, (job.departure_time, job, DEPARTURE))

    def put_job_in_queue(self, job):
        heappush(self.queue, (job.arrival_time, job))

    def handle_departure(self, time, job):
        if self.queue:  # not empty
            _, next_job = heappop(self.queue)
            self.start_service(time, next_job)
        else:
            self.state = IDLE
        self.served_jobs.append(job)

#+end_src

#+begin_exercise
Explain how the following methods work:
a. arrivals: ~GG1.handle_arrival()~;
b. departures: ~GG1.handle_departure~;
c. running the simulation: ~GG1.run~.
#+end_exercise


You should observe that, with a heap queue, we can let the heap queue do all the work of tracking time. It is not easy to understand how we use a queue (that is, the heap queue) to simulate queueing systems. However, once you understand how event stacks work, you know all there is to discrete event simulation.

** Running the simulator

Put this code  the ~GG1~ class.

#+begin_src python
labda = 2.0
mu = 3.0
rho = labda / mu
F = expon(scale=1.0 / labda)  # interarrival time distribution
G = expon(scale=1.0 / mu)  # service time distribution
num_jobs = 100

events = []

gg1 = GG1(F, G, num_jobs)
gg1.make_jobs()

print(events[:5])  # this
#+end_src

#+begin_exercise
Explain the  results of the `this' line.  Why is the content of column 5 negative?
#+begin_hint
Realize that we have not yet called ~gg1.run()~.
#+end_hint
#+end_exercise


** Analyze the results, statistics

Put this at the end of the code.

#+begin_src python
gg1.run()

sojourn = np.zeros(len(gg1.served_jobs))
for i, job in enumerate(gg1.served_jobs):
    sojourn[i] = job.sojourn_time()

print(sojourn.mean(), sojourn.std(), sojourn.max())

plt.clf()
plt.plot(sojourn)
plt.savefig('figures/sojourn0.png')
#+end_src

#+begin_exercise
Change the seed of the random number generator,  choose your favorite number of jobs (something positive, reasonably small).
make  your own plot and include it in your document. Include also the statistics such as the mean.
#+end_exercise

If we would use this code for real world problems, we of course should compare the results of this simulator to our earlier simulators;  for the assignment we skip this.

* Other scheduling rules

Suppose we prefer to serve the shortest job in queue.  We can inherit all of our ~GG1~ queue, except the scheduling rule. For this we need to change just one line of the class. The implementation of other  scheduling is also extremely easy now


** SPTF scheduling

Here is a class to simulate the SPTF  (shortest processing time first).  We can derive all from ~GG1~ except that we have to change the rule on how to put the jobs on the queue.

#+begin_src python
class SPTF_queue(GG1):
    def put_job_in_queue(self, job):
        heappush(self.queue, (job.service_time, job))
#+end_src

#+begin_exercise
Explain how this code implements SPTF.
#+end_exercise

#+begin_exercise
To  run it, use this code. Include the results.
#+begin_src python
sptf = SPTF_queue(F, G, num_jobs)
sptf.make_jobs()
sptf.run()
print(sptf.served_jobs[:5])
#+end_src
#+end_exercise

#+begin_exercise
If you're interested (but you can skip this) print at the end the average number of jobs in the system and compare that to $\E L$ for the FIFO queue. What difference do you see?
#+end_exercise


** LIFO scheduling

Last-in-First-Out is also trivial.

#+begin_src python
class LIFO_queue(GG1):
    def put_job_in_queue(self, job):
        heappush(self.queue, (-job.arrival_time, job))
#+end_src

#+begin_exercise
Run an example with 100 jobs.
Make a graph of the waiting times and the sojourn times. Comment on your findings.
#+end_exercise

** Serve longest job first

#+begin_exercise
Update the code of the ~SPTF~ queue such that the longest job is selected from the queue, rather than the shortest. Include the relevant lines of the code, and explain why it implements the SLJF rule.
#+begin_hint
Put a minus sign at the right position when adding a job to the queue heap.
#+end_hint
#+end_exercise

Hopefully you see how easy it is (now we have done all the hard work) to compare different job scheduling rules. For instance, for the earliest due data first rule, we add a due date attribute to each job, and when selecting a job for service  we choose the earliest due date.


* TODO Restore my emacs settings                                   :noexport:

#+begin_src emacs-lisp :eval no-export
(modus-themes-load-vivendi)
(set-face-attribute 'default nil :height 100)
#+end_src

#+begin_src shell
mv simulation-with-event-stacks.pdf ../
#+end_src
