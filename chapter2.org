* Queueing process in discrete time
story about psychiatrist
blocking is most effective
chop up time in periods
- a_k = # jobs arriving in p k
- c_k = capacity (max # jobs served in p k)
- d_k = # jobs departing in p k
- L_k = system length, # jobs at the end of period k
In this system no jobs are in service (ie L is also jobs in queue)
Jobs arrive at start or end of period, so can be served in or not in period.
Depend on context, the first underestimates the second overestimates.

Recursions and control rules.

** Exercises 2.1

*** 2.1.1

#+begin_src python :results output
    a = [0, 5, 4, 9]
    c = len(a)*[7]
    L = [0]*(len(a) + 1)
    L[0] = 8

    for k in range(1, len(a)):
        d = min(L[k-1], c[k])
        L[k] = L[k-1] + a[k] - d

    print(f'Queue at end of period 3, when arrivals are at the end of the period: {L[3]}')
  
    for k in range(1, len(a)):
        d = min(L[k-1] + a[k], c[k])
        L[k] = L[k-1] + a[k] - d

    print(f'Queue at end of period 3, when arrivals are at the start of the period: {L[3]}')
#+end_src

#+RESULTS:
: Queue at end of period 3, when arrivals are not served in the same period: 9
: Queue at end of period 3, when arrivals are served in the same period: 5

*** 2.1.2
prove by splitting up in both cases
#+begin_src python :results output
  a = [0, 5, 4, 9]
  c = len(a)*[7]
  L = [0]*(len(a) + 1)
  L[0] = 8

  for k in range(1, len(a)):
     L[k] = max(L[k-1] - c[k], 0) + a[k]

  print(f'Queue at end of period 3, when arrivals are at the end of the period: {L[3]}')

  for k in range(1, len(a)):
      L[k] = max(L[k-1] + a[k] - c[k], 0)

  print(f'Queue at end of period 3, when arrivals are at the start of the period: {L[3]}')
#+end_src

#+RESULTS:
: Queue at end of period 3, when arrivals are at the end of the period: 9
: Queue at end of period 3, when arrivals are at the start of the period: 5

*** 2.1.3
#+begin_src python :results output
  import numpy as np
  n = 100
  a = np.random.randint(3,7, n)
  c = [4]*len(a)
  L = np.zeros_like(a)
  L[0] = 8
  K = 16
  lost = np.zeros_like(a)

  for k in range(1, len(L)):
      d = min(L[k-1], c[k])
      L[k] = min(K, L[k-1] + a[k] - d)
      lost[k] = max(0, L[k-1] + a[k] - d - K)

  for k in range(1, len(L)):
      d = min(L[k-1], c[k])
      al = min(a[k], K - L[k-1] + d)
      L[k] = L[k-1] + al - d
      lost[k] = a[k] - al

  print(f'fraction of lost customers: {lost.sum()/a.sum()}')
#+end_src

#+RESULTS:
: fraction of lost customers: 0.10154525386313466

*** 2.1.4
note that a fraction p+p^2+p^3+... of the "departures" is added to the input of the server,
so the service rate needs to be at least 1/q times the arrival rate.

#+begin_src python :results file
  import numpy as np
  import matplotlib.pyplot as plt
  n = 20000

  a = [80]*n
  c = [100]*n

  L = np.zeros_like(a)
  L[0] = 0
  p = 0.2
  f = 0

  for k in range(1, len(L)):
      m = min(L[k-1], c[k])
      d = np.random.binomial(m, 1-p)
      L[k] = L[k-1] + a[k] - d

  plt.clf()
  plt.plot(L, label='failure')

  for k in range(1, len(L)):
      d = min(L[k-1], c[k])
      L[k] = L[k-1] + a[k] - d

  plt.plot(L, label='nofailure')
  plt.legend()
  plt.savefig('Serverwithfailure.png')
  return 'Serverwithfailure.png'
#+end_src

#+RESULTS:
[[file:Serverwithfailure.png]]

*** 2.1.5
#+begin_src python :results output
  import numpy as np
  import matplotlib.pyplot as plt
  n = 200

  a = np.random.poisson(80, n)
  c = [100]*n

  L = np.zeros_like(a)
  L[0] = 100
  p = 0.2
  f = 0

  for k in range(1, len(L)):
      Sn = min(L[k-1], c[k]) - int((f+1)/2)
      df = np.random.binomial(f, 1-p)
      dn = np.random.binomial(Sn, 1-p)
      f = f - df + Sn - dn
      L[k] = L[k-1] + a[k] - df - dn
      print(Sn, dn, df, f, L[k], a[k])

  plt.clf()
  plt.plot(L, label='failure')


  for k in range(1, len(L)):
      d = min(L[k-1], c[k])
      L[k] = L[k-1] + a[k] - d

  plt.plot(L, label='nofailure')
  plt.legend()
  plt.savefig('Images/halffailure.png')
  #  return 'Images/halffailure.png'
#+end_src

#+RESULTS:
#+begin_example
100 80 0 20 101 81
90 78 18 14 82 77
75 63 12 14 90 83
83 69 10 18 100 89
91 76 13 20 93 82
83 69 18 16 85 79
77 54 14 25 107 90
87 74 23 15 89 79
81 68 12 16 96 87
88 66 10 28 83 63
69 53 24 20 81 75
71 61 17 13 80 77
73 66 10 10 76 72
71 52 7 22 96 79
85 73 18 16 89 84
81 58 12 27 100 81
86 60 22 31 106 88
84 64 23 28 108 89
86 73 23 18 90 78
81 60 15 24 97 82
85 68 20 21 80 71
69 56 17 17 102 95
91 69 15 24 92 74
80 68 16 20 85 77
75 57 17 21 87 76
76 59 14 24 98 84
86 71 17 22 87 77
76 58 18 22 89 78
78 64 17 19 99 91
89 70 17 21 85 73
74 60 19 16 74 68
66 51 14 17 92 83
83 61 11 28 101 81
86 74 21 19 99 93
89 72 13 23 90 76
78 66 18 17 95 89
86 71 12 20 79 67
69 51 17 21 79 68
68 51 17 21 95 84
84 69 13 23 100 87
88 70 22 19 77 69
67 52 15 19 86 76
76 61 18 16 83 76
75 58 15 18 98 88
89 75 16 16 69 62
61 49 14 14 83 77
76 65 12 13 87 81
80 63 9 21 103 88
89 72 18 20 83 70
73 56 16 21 85 74
74 59 15 21 102 91
89 69 18 23 80 65
68 52 19 20 106 97
90 79 16 15 96 85
88 68 11 24 97 80
85 69 17 23 98 87
86 64 21 24 88 75
76 62 20 18 101 95
91 76 14 19 102 91
90 74 16 19 71 59
61 50 17 13 92 88
85 66 9 23 100 83
88 74 18 19 96 88
86 70 13 22 87 74
76 57 18 23 91 79
79 64 22 16 85 80
77 59 11 23 98 83
86 68 15 26 100 85
87 72 23 18 106 101
91 72 14 23 107 87
88 74 17 20 96 80
86 72 17 17 80 73
71 61 14 13 100 95
93 75 10 21 101 86
89 71 16 23 96 82
84 63 16 28 102 85
86 73 24 17 102 97
91 75 15 18 86 74
77 60 13 22 91 78
80 64 18 20 84 75
74 62 17 15 95 90
87 74 9 19 104 92
90 69 18 22 93 76
82 65 17 22 89 78
78 66 19 15 87 83
79 61 14 19 90 78
80 66 14 19 90 80
80 64 14 21 95 83
84 64 20 21 88 77
77 62 16 20 86 76
76 56 15 25 82 67
69 52 17 25 90 77
77 63 20 19 92 85
82 64 14 23 88 74
76 63 20 16 63 58
55 49 11 11 74 71
68 54 10 15 111 101
92 78 12 17 97 76
88 75 13 17 91 82
82 68 16 15 90 83
82 62 10 25 88 70
75 61 16 23 81 70
69 51 16 25 92 78
79 59 19 26 99 85
86 63 19 30 102 85
85 66 24 25 105 93
87 69 22 21 88 74
77 59 18 21 83 72
72 62 16 15 87 82
79 67 14 13 82 76
75 60 10 18 103 91
91 73 14 22 111 95
89 73 17 21 117 96
89 70 15 25 112 80
87 63 19 30 109 79
85 59 26 30 120 96
85 65 22 28 118 85
86 72 21 21 98 73
87 64 20 24 92 78
80 63 20 21 99 90
88 66 18 25 89 74
76 59 20 22 79 69
68 51 16 23 77 65
65 53 21 14 68 65
61 45 12 18 117 106
91 66 15 28 111 75
86 69 19 26 97 74
84 69 18 23 97 87
85 71 16 21 95 85
84 66 16 23 107 94
88 71 19 21 98 81
87 66 19 23 100 87
88 68 19 24 101 88
88 64 22 26 100 85
87 73 22 18 79 74
70 53 16 19 84 74
74 62 15 16 79 72
71 57 13 17 86 77
77 56 14 24 81 65
69 51 19 23 90 79
78 61 17 23 84 72
72 61 15 19 86 78
76 60 12 23 87 73
75 60 20 18 100 93
91 67 13 29 99 79
84 65 22 26 102 90
87 74 21 18 89 82
80 66 16 16 83 76
75 64 14 13 91 86
84 61 9 27 79 58
65 54 19 19 80 74
70 56 15 18 95 86
86 70 15 19 104 94
90 68 14 27 97 75
83 69 24 17 92 88
83 69 10 21 95 82
84 70 17 18 90 82
81 59 14 26 114 97
87 61 20 32 116 83
84 63 23 30 105 75
85 74 27 14 94 90
87 69 12 20 90 77
80 63 15 22 89 77
78 67 18 15 80 76
72 58 11 18 87 76
78 59 13 24 91 76
79 60 20 23 86 75
74 55 22 20 88 79
78 59 14 25 95 80
82 70 20 17 82 77
73 65 15 10 96 94
91 70 10 21 90 74
79 58 15 27 103 86
86 66 26 21 85 74
74 62 20 13 100 97
93 74 12 20 110 96
90 70 16 24 93 69
81 65 20 20 87 79
77 63 14 20 73 63
63 48 18 17 92 85
83 64 16 20 79 67
69 54 14 21 93 82
82 57 16 30 90 70
75 61 22 22 69 62
58 47 18 15 89 85
81 66 14 16 81 72
73 53 13 23 85 70
73 52 19 25 96 82
83 66 20 22 94 84
83 65 19 21 95 85
84 72 14 19 86 77
76 66 16 13 78 74
71 54 9 21 78 63
67 48 17 23 89 76
77 66 15 19 88 80
78 63 16 18 84 75
75 55 18 20 76 65
66 55 14 17 81 74
72 63 15 11 85 82
#+end_example

*** 2.1.6
#+begin_src python :results output
  import numpy as np
  import matplotlib.pyplot as plt
  T = 100
  a = np.random.poisson(4,T)
  #the capacity is set at the start of the period?
  #Let's assume there is a maximum of 5
  c = 5*np.ones_like(a)
  L = np.zeros_like(a)
  C = np.zeros_like(a)
  b = 1
  h = 1
  for k in range(1, len(L)):
      d = min(L[k-1] + a[k], c[k])
      L[k] = L[k-1] + a[k] - d
      C[k] = d*b + h*L[k]

  print(f'Total costs = {C.sum()}')
  plt.plot(L, label='Systemlength')
  plt.savefig('syslen.png')
  #return 'syslen.png'
#+end_src

#+RESULTS:
: Total costs = 513

*** 2.1.7
I changed it to the case where there is only going to be folks served if
the queue + new arrivals can be served.
#+begin_src python :results file
    import numpy as np
    import matplotlib.pyplot as plt
    T = 100
    a = np.random.poisson(14,T)
    #the capacity is set at the start of the period?
    #Let's assume there is a maximum of 5
    c = 15*np.ones_like(a)
    L = np.zeros_like(a)
    N = 15

    for k in range(1, len(L)):
        if L[k-1] + a[k] >= N:
            d = c[k]
        else: d = 0
        L[k] = L[k-1] + a[k] - d

    plt.clf()
    plt.plot(L, label='with treshold')

    for k in range(1, len(L)):
        d = min(L[k-1] + a[k], c[k])
        L[k] = L[k-1] + a[k] - d

    plt.plot(L, label='no treshold')
    plt.legend(loc="upper right")
    plt.savefig('Treshold.png')
    return 'Treshold.png'
#+end_src

#+RESULTS:
[[file:Treshold.png]]

*** 2.1.8
#+begin_src python :results output
  import numpy as np

  T = 100
  a = np.random.poisson(14,T)
  #the capacity is set at the start of the period?
  #Let's assume there is a maximum of 15
  c = 15*np.ones_like(a)     #service capacity
  L = np.zeros_like(a)       
  C = np.zeros_like(a)       #Cost per period
  #prices and parameters
  N = 20
  K = 5
  b = 2
  h = 1
  ON = 1
  OFF = 0
  STATE = OFF                 #The machine starts off, as L[0] = 0
  count = 0                   #Number of times the machine is turned on

  for k in range(1, len(L)):
      d = min(L[k-1] + a[k], c[k])
      L[k] = L[k-1] + a[k] - d*STATE
      C[k] = h*L[k] + b*STATE
      if L[k] >= N:
          STATE = ON
          count += 1
      if L[k] == 0:
          STATE = OFF

  print(f'Total costs: {sum(C) + b*count}')
#+end_src

#+RESULTS:
: Total costs: 2113

*** 2.1.9
Lk = ak
*** 2.1.10
given Lk
*** 2.1.11
#+begin_src python :results file
  import numpy as np
  import matplotlib.pyplot as plt

  num = 100
  a1 = np.random.poisson(5,num)
  a2 = np.random.poisson(5,num)
  c = np.random.poisson(11, num)
  L1 = np.zeros(num,dtype=int)
  L2 = np.zeros(num,dtype=int)
  
  for k in range(1,len(L1)):
      d1 = min(L1[k-1], c[k])
      d2 = min(L2[k-1], c[k] - d1)
      L1[k] = L1[k-1] + a1[k] - d1
      L2[k] = L2[k-1] + a2[k] - d2

  plt.plot(L1, label='priority')
  plt.plot(L2, label='derderangs')
  plt.legend()
  plt.savefig('priorityqueue.png')
  return 'priorityqueue.png'
#+end_src

#+RESULTS:
[[file:priorityqueue.png]]

*** 2.1.12
proportionally fair queueing
#+begin_src python :results file
  import numpy as np
  import matplotlib.pyplot as plt

  num = 100
  a1 = np.random.poisson(5,num)
  a2 = np.random.poisson(5,num)
  c = np.random.poisson(11, num)
  L1 = np.zeros(num,dtype=int)
  L2 = np.zeros(num,dtype=int)
  L1[0] = 12
  L2[0] = 5

  for k in range(1,len(L1)):
      ratio = L1[k-1]/(L1[k-1]+L2[k-1])
      d1 = min(L1[k-1], int(ratio*c[k]))
      d2 = min(L2[k-1], c[k] - d1)
      L1[k] = L1[k-1] + a1[k] - d1
      L2[k] = L2[k-1] + a2[k] - d2

  plt.plot(L1, label='first')
  plt.plot(L2, label='second')
  plt.legend()
  plt.savefig('proportionalqueue.png')
  return 'proportionalqueue.png'
#+end_src

#+RESULTS:
[[file:proportionalqueue.png]]

*** 2.1.13
queue with restricted service capacity
#+begin_src python :results file
  import numpy as np
  import matplotlib.pyplot as plt
  num = 100
  a1 = np.random.randint(5,9,num)
  a2 = np.random.randint(5,9,num)
  c = np.random.randint(10,16,num)
  L1 = np.zeros(num)
  L2 = np.zeros(num)
  r1 = 4
  r2 = 6
  for k in range(1,len(L2)):
      fd1 = min(L1[k-1], r1)
      fd2 = min(L2[k-1], r2)
      ed1 = min(L1[k-1] - fd1, c[k] - fd1 - fd2)
      ed2 = min(L2[k-1] - fd2, c[k] - fd1 - fd2 - ed1)
      d1 = fd1 + ed1
      d2 = fd2 + ed2
      L1[k] = L1[k-1] + a1[k] - d1
      L2[k] = L2[k-1] + a2[k] - d2

  plt.plot(L1, label='1')
  plt.plot(L2, label='2')
  plt.legend()
  plt.savefig("Images/guaranteed2.png")
  return 'Images/guaranteed2.png'
#+end_src

#+RESULTS:
[[file:Images/guaranteed2.png]]

*** 2.1.15
#+begin_src python :results output
  import numpy as np
  from scipy.stats import poisson
  import matplotlib.pyplot as plt





  
#+end_src

*** 2.1.16

*** 2.1.17
two stations that send their products to station C
#+begin_src python :results output
  import numpy as np
  import scipy.stats as sc
  import matplotlib.pyplot as plt

  num = 100
  p = 1/12
  aA = sc.geom.rvs(p, size=num)
  aB = sc.geom.rvs(p, size=num)
  sA = sc.poisson.rvs(1.1/p,size=num)
  sB = sc.poisson.rvs(1.1/p,size=num)
  sC = sc.poisson.rvs(2/p,size=num)

  # the variance of the arrivals of A and B is way higher than
  # the service rate is.
  # is geometric realistic? basically we are saying every period is until a succes and the arrivals are failures. 
  LA = np.zeros(num)
  LB = np.zeros(num)
  LC = np.zeros(num)

  LA[0] = 19
  LB[0] = 19
  LC[0] = 19
  for k in range(1, num):
      dA = min(LA[k-1] + aA[k], sA[k])
      dB = min(LB[k-1] + aB[k], sB[k])
      aC = dA + dB                       #arrivals for A and B are served
      dC = min(LC[k-1] + aC, sC[k])      #in the same period, so arrive
      LA[k] = LA[k-1] + aA[k] - dA
      LB[k] = LB[k-1] + aB[k] - dB
      LC[k] = LC[k-1] + aC - dC

  plt.plot(LA, label='A')
  plt.plot(LB, label='B')
  plt.plot(LC, label='C')
  plt.legend()
  plt.savefig("mergingstreams.png")
  #  return 'mergingstreams.png'
#+end_src

#+RESULTS:
: 63
: 26


*** 2.1.18
paint mixing machine for downstream two machines own queue
#+begin_src python :results file
  import numpy as np
  import scipy.stats as sc
  import matplotlib.pyplot as plt

  num = 100
  p = 1/12
  aA = sc.poisson.rvs(1/p, size=num)
  aB = sc.poisson.rvs(1/p, size=num)
  sA = sc.poisson.rvs(1.1/p,size=num)
  sB = sc.poisson.rvs(1.1/p,size=num)
  sC = sc.poisson.rvs(2/p,size=num)

  # the variance of the arrivals of A and B is way higher than
  # the service rate is.
  # is geometric realistic? basically we are saying every period is until a succes and the arrivals are failures. 
  LA = np.zeros(num)
  LB = np.zeros(num)
  LC = np.zeros(num)

  LA[0] = 19
  LB[0] = 19
  LC[0] = 19
  for k in range(1, num):
      dA = min(LA[k-1] + aA[k], sA[k])
      dB = min(LB[k-1] + aB[k], sB[k])
      aC = dA + dB                       #arrivals for A and B are served
      dC = min(LC[k-1] + aC, sC[k])      #in the same period, so arrive
      LA[k] = LA[k-1] + aA[k] - dA
      LB[k] = LB[k-1] + aB[k] - dB
      LC[k] = LC[k-1] + aC - dC

  plt.plot(LA, label='A')
  plt.plot(LB, label='B')
  plt.plot(LC, label='C')
  plt.legend()
  plt.savefig("mergingstreams.png")
  #  return 'mergingstreams.png'
#+end_src

#+RESULTS:
[[file:None]]

*** 2.1.19
#+begin_src python :results file
  import numpy as np
  import scipy.stats as sc
  import matplotlib.pyplot as plt

  num = 50
  p = 4
  aA = sc.poisson.rvs(p, size=num)
  aB = sc.poisson.rvs(p, size=num)
  sA = sc.poisson.rvs(2.2*p,size=num)

  # the variance of the arrivals of A and B is way higher than
  # the service rate is.
  # is geometric realistic? basically we are saying every period is until a succes and the arrivals are failures. 
  LA = np.zeros(num)
  LB = np.zeros(num)
  atB = 0
  LA[0] = 12
  LB[0] = 19
  setup = 1
  count = 1 
  for k in range(1, num):
      dA = min(LA[k-1] + aA[k], sA[k]) * (1 - atB) * setup
      dB = min(LB[k-1] + aB[k], sA[k]) * atB * setup
      LA[k] = LA[k-1] + aA[k] - dA
      LB[k] = LB[k-1] + aB[k] - dB
      if atB*LB[k] + (1-atB)*LA[k] == 0:
          atB = atB**atB - atB
          setup = 0
          count = 0
      elif count >= 6:
          setup = 1 
      count += 1
  plt.clf()
  plt.plot(LA, label='A')
  plt.plot(LB, label='B')
  plt.legend()
  plt.savefig(P'queuewithswitchtimes.jpg')
  return 'queuewithswitchtimes.jpg'
#+end_src

#+RESULTS:
[[file:queuewithswitchtimes.jpg]]

* Poisson Process
** relation to binomial
periods with small likelyhood to inf
np = lambda t, lambda arrival rate
Poisson process
** Stationary and independent increments
N(s,t]:= N(t) - N(s)
N(u,v] sim N(s,t] if t-s=v-u
when (s,t] and (u,v] do not overlap, they're independent
** Properties
small o of delta t
uniform arrival when known
var = ex, C^2 = 1/lt
** Merging and splitting streams
sum of independent is N l+m
thin with prob p is N lp
* Queueing process in continuous time
- X_k interarrival times
- S_k service times
- W_k waiting time = [W_k-1 + S_k-1 - X_k]+
- J_k sojourn time = W_k + S_k
- A_k = A_k-1 + X_k
- A(t) = max(k: A_k <= t)

- V(t) virual waiting time process, time to wait if arrive at t

- A(t) # arrivalts up to time t
- A_k = min(t: A(t) >= k)
- X_k = A_k - A_k-1

- D_k = A_k + J_k = departure time
- D(t) = max(k: D_k <= t) = sum 1(D_k <= t)
- L(t) # jobs in system at time t = A(t) - D(t) + L(0)
- Q(t) # jobs in queue = L(t) - L_s(t)

** Times
Sojourn time is time in system is waiting time (ie time in queue
plus time took to serve)

Depending on the data at hand, the recursions can be set up.

The queue length at general time t can be quite different then
the queue length as seen by arrivals.

** Multiserver
Each server has its own waiting line
A job sees the waiting time (or an estimation of it)
and chooses the server with the shortest

#+begin_src python :results output
  import numpy as np
  from scipy.stats import expon

  num = 50
  c = 5
  labda = 4
  X = expon.rvs(scale=1/labda, size=num)
  S = expon.rvs(scale=c/labda, size=num)
  W = np.zeros((num,c))
  idx = np.zeros(num,dtype=int)
  S[0] = 0
  def unit(a, l):
      v = np.zeros(l)
      v[a] = 1
      return v


  for k in range(1, len(W)):
      idx[k-1] = np.argmin(W[k-1])
      W[k] = np.maximum(W[k-1] - X[k] + S[k-1]*unit(idx[k-1],c), np.zeros(c))

  #Individual waiting times
  w = np.zeros(num)
  for i in range(1, len(w)):
     w[i] = W[i]@unit(idx[i],c)

  print(w)
#+end_src

#+RESULTS:
: [0.         0.         0.         0.         0.         0.
:  0.         0.         0.         0.         0.         0.
:  0.         0.15159218 0.         0.37284315 0.38664146 0.58144442
:  0.54271921 0.6554265  0.95335742 0.88518359 0.74993368 0.91899615
:  1.16125619 1.14033275 2.28875686 1.77452474 1.27688733 1.73923768
:  1.82288168 1.78805781 1.75406895 1.49091316 1.48229757 1.70202149
:  1.57276134 1.89221479 1.8558075  1.80026847 1.27075658 1.24864076
:  1.31802353 1.23446921 1.3771843  1.06331969 1.04672886 1.12370247
:  1.87426583 2.52419027]


* Exponential Distribution
Close relation to poisson.
Memoryless, like geometric
A counting process is a Poisson process with rate lambda  IFF
The interarrival times are exponentially distributed with lambda t
